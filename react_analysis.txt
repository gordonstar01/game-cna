장점
reactjs
컴포넌트 기반 라이브러리
뛰어난 메모리 관리/ 성능
서버 & 클라이언트 렌더링
매우 간편한 UI 수정 및 재사용
페이스북에서 개발
다른 프레임워크나 라이브러리와 혼용가능
표준 자바스크립트

단점
View Only
IE8 이하 지원 안함
jQuery에 비해 배우기 어렵다

jQuery
장점
브라우저 호환성을 고려하지 않고 작업이 가능
배우기 쉬움

단점
표준 자바스크립트가 아님
디버깅, 에러핸들링이 어려움


reactjs 특징
Component 단위 작성
 - 컴포넌트는 UI를 구성하는 개별적인 뷰 단위로 생산성과 유지 보수 향상
JSX(javascript + xml)
 - JSX는 자바스크립트에 대한 확장 구문으로서, javascript와 마크업을 사용하여 컴포넌트 구성
Virtual DOM
 - DOM에 여러번 변경이 일어나도 실제 DOM에 적용되기 전에 Virtual DOM에 우선 적용하고 마지막 한번만 실제 DOM 적용


Jquery는 무엇이 문제였나
Jquery는 누구나 쉽게 DOM을 조작할 수 있도록 하는 아주 멋진 도구였습니다.
그러나 Jquery는 뭔가 구조적 대안이라기 보다는 날카로운 커터칼에 가까운 것이었죠.
앱 전체에 무분별하게 Jquery가 난무하고 있는 코드를 본 적 있으신가요? 
Javascript로 간단한 계산도 못해도 Jquery는 쓴다느니, 
남이 쓴 Jquery를 그냥 갖다 붙이면 된다느니 하는 말이 나오는 것이 바로 Jquery의 장점과 단점을 모두 보여준다고 할 수 있습니다.
Jquery가 인기있었던 이유가 바로 이 커터칼처럼 DOM을 잘라내는 방식에 있었지만, 
프론트엔드 개발의 전문성이 높아지고 대형 앱의 유지/보수가 화두가 되면서 이것이 Jquery의 한계로써 드러나게 되었죠.


특징
JSX - JSX는 JavaScript의 Syntax 확장입니다. JSX를 사용하는것이 필수는 아니지만, 사용하는것이 권장됩니다.
Components - React는 전부 Component에 대한 것 입니다. React 개발을 할땐 모든것을 Component로서 생각해야 합니다.
단일방향 (Unidirectional) 데이터 흐름 & Flux - React에선 데이터가 단일방향으로만 흐릅니다. 데이터 흐름을 단방향으로 제한함으로서 데이터를 추적하기 쉽고 디버깅을 쉽게 해줍니다. Flux는 데이터가 단일방향으로 흐르는것을 유지해주는 패턴입니다.
장점
1. React는 JavaScript 객체 형태의 Virtual DOM 을 사용하여 어플리케이션의 성능을 향상시킴 (JavaScript Virtual DOM 처리가 실제 DOM 보다 빠르기 때문)
2. 서버 & 클라이언트 사이드 렌더링 지원을 통해 브라우저측의 초기 렌더링 딜레이를 줄이고, SEO 호환도 가능해짐
3. Component 의 가독성이 매우 높고 간단하여 쉬운 유지보수, 간편한 UI 수정 및 재사용 용이
4. React는 프레임워크가 아닌 라이브러리기 때문에 다른 프레임워크와 혼용 가능
단점
1. VIEW ONLY , VIEW 이외의 기능은 써드파티 라이브러리(Third party library, =패키지, 모듈로 불리기도함)를 이용하거나 직접 구현해야함
2. IE8 이하 지원하지 않음 (IE8 이하 버전을 지원해야 할 경우 v0.14 버전을 사용 해야함)
3. React는 inline-template 과 JSX 를 사용하는데, 일부 개발자들에게는 적응이 안 될 수 있음

위 세가지 React의 큰 특징를 정리해보자면,
1. 컴포넌트 별로 따로 분리되어 있어서 재사용이 용이하고 유지보수가 가능하다. 
2. JSX라는 React의 문법이 HTML과 비슷하여 예측가능한 개발이 가능하다. 
3. Virtual DOM이 바뀐 부분만 새로 데이터를 로드해주어서 효율적인 DOM 제어가 가능하다.
이러한 이유들로 React를 사용한다고 생각하게 되었다.


jQuery의 특징
현재 가장 인기있는 자바스크립트 라이브러리 중 하나로 꼽힌다. 기존의 자바스크립트로 DOM 탐색을 하려면 document.getElementById(), document.getElementByClassName() 과 같은 구문을 사용해서 접근해야만 했다. 그런데 jQuery는 CSS 검색 스타일로 쉽게 이용 가능하다.
$("#id"), $(".className") 단순히 이런 구문을 사용하여 id값을 갖는 element나 해당 className을 갖는 element들에 접근 할 수 있다. 자바스크립트보다 훨씬 간단하게 사용가능하면서도 동일한 동작을 구현할 수 있다.
http://jquery.com에 의하면 jQuery는 가볍고, DOM탐색이나 이벤트, 애니메이션, ajax등을 활용할 때 유용하다고 한다.

jQuery의 장점
가장많은 사람들이 꼽는 장점은 '멀티 브라우저 지원'이다. 어느 브라우저에서나 동일하게 작동을 한다는 것은 자바스크립트 개발자로서는 너무나 매력적인 일이다. 특히 IE의 독자노선 행보로 인해 IE와 다른 브라우저들은 자바스크립트에서 지원하는 기능이 다르거나, 같은 기능이 있더라도 사용 방법이 다른 경우도 있었는데 jQuery에서는 이것을 전부 다 해결해 준다는 것이 제일 큰 장점이다.
특히, jQuery mobile을 이용해본 사람이라면 모든 모바일 단말에서의 똑같은  UI와 동작으로 인해 jQuery의 매력에 빠졌을지도 모른다. 단순히 attribute를 설정해 주는 것만으로  UI들이 바로바로 적용되는 놀라운 기능들을 제공한다.
그 외에도 $(".className").click()과 같이 이용할 경우 forEach를 하듯이 모든 element에 속성 부여나 이벤트 부여를 쉽게 해 줄 수 있다. 

jQuery의 단점
무엇보다도 jQuery라는 라이브러리를 이용하기 위해 새로운 API를 학습해야 한다는 것은 이슈가 될만 하다. 게다가 자바스크립트라는 언어를 잘 모를 때, 겉핥기 정도로 밖에 모를 때 jQuery에 익숙해 진다면 분명히 문제가 될 수 있다. 심지어는 Jquery를 자바스크립트가 아닌 새로운 하나의 언어로 받아들이게 되는 사람들도 종종 있다.
또한 퍼포먼스의 문제도 있다. 어플리케이션마다 다른 요구사항에 최적화를 하기 위해서는 직접 jQuery를 파고 들어가야 하는 경우도 있을지도 모른다. 물론 이런 최적화는 라이브러리를 잘 구성해 놓은 jQuery에서는 큰 고민이 아닐지도 모르지만, 그것보다도 더 큰 퍼포먼스의 문제는 32K나 되는 용량의 문제이다. zip파일로 만들었는데도 이정도의 용량이라면, 왠만한 사이트 자바스크립트의 전체를 합친 양 정도 될지도 모른다. 그런데 단순히 한, 두 개의 기능을 사용하려고 jQuery 전체를 가져오는 것은 너무나도 비효율적인 투자다.

jQuery의 이슈들

1. 사이즈가 크다.
jQuery 1.12.4 minified버전은 95K이고 압축하면 34K정도 됩니다. 크다면 크고 작다면 작은 사이즈입니다. 몇년전까지만해도 핸드폰의 사양이 낮아서 문제가 컸는데, 요즘은 그 정도는 아닙니다. 게다가 React나 Angular같은 라이브러리는 훨씬 더 크니 사이즈로 문제삼기는 좀 애매하죠. 필요없는 라이브러리를 제거한 slim버전은 27K인데, 예전 IE는 지원하지 않습니다.

2. Modular하지 않다.
한 프로젝트에서 jQuery의 모든 기능을 이용하는 경우는 없습니다. Javascript의 표준 모듈 방식인 것도 아니고, Tree Shaking도 지원하지 않기에 필연적으로 안쓰는 코드를 포함하게 되는데, 이게 옳은 일인지 고민이 필요합니다. 특히 Animation이나 AJAX는 너무 구식이라 더 좋은 대안을 쓰는게 낫습니다. slim 버전에서는 이와 같은 기능이 분리되었습니다.

3. 너무 쉽다.
document.getElementById(“some-id”)보다 $(“#some-id”)쪽이 훨씬 보기 편합니다. 그런데 너무 쉽다보니 $를 남발하게 됩니다. 생각보다 $를 쓰는게 메모리와 CPU를 잡아먹습니다. 그리고 jQuery.data같은 함수는 DOM에 직접 읽고 쓰는 기능을 제공하는데, 덕분에 속도면에서도 느리고 변수를 Global에 노출시키게 됩니다. 너무 편해서 잘못된 코딩을 하게 되는 것도 문제입니다만, 근본적으로 보자면 jQuery를 이해하지 못하고 쓰는게 문제겠죠.

4. jQuery는 javascript가 아니다.
기본적으로 jQuery는 Select한 element의 배열을 기준으로 작업합니다. $(“.some-class”) 이면 [el1, el2, el3]와 같은 Selector에 의해 선택된 배열을 내부에 가지고 있으면서 그 기준으로 작업을 합니다. 그런데 예를 들어 $(“div”).text()를 하면 div의 내용을 가져오는데, div가 두개가 있을 때는 두 div의 내용을 합쳐서 하나의 스트링을 반환합니다. < div >123< /div >< div >456</ div >이면 $(“div”).text()의 결과는 “123456”이 됩니다. 근데 과연 이런 동작이 맞을까요? 대부분 text()로 값을 가져오는 경우는 하나의 값이 필요해서 입니다. 두개의 text값이 필요하다면 각각의 값을 배열로 반환하는게 맞지 않을까 하네요. jQuery의 수많은 함수가 배열로 동작하는데, $(“.some-class”)가 배열처럼 보이지 않기에 문제를 일으킬 소지가 있습니다. 이와는 반대로 val()일때는 맨 처음 element의 값만 가져오도록 되어있는데 다른 함수들과 동작이 다릅니다.

jQuery의 hide, show는 element에 style을 적용합니다. < div style=”display:none” >처럼요. 그런데 element의 style은 우선도가 높기에 css에서 설정한게 안먹을 수도 있습니다. 그러므로 가급적 쓰면 안됩니다만 어디에고 그런 설명을 찾기는 어렵습니다.

jQuery만의 독특한 동작이 상당히 많습니다. 그게 틀린 방식은 아닙니다만 웹표준은 아닙니다. 그러므로 jQuery를 잘 쓰기 위해서는 jQuery 내부 동작을 잘 알아야 합니다. 근데 그럴꺼면 그냥 javascript로 작성하는게 더 편하지 않나 합니다.

5. 웹표준을 지키지 않는다.
지키지않는다는게 정확한 표현은 아니고, jQuery가 워낙 오래되서 웹표준이 정해지기 전에 나왔기 때문에 문제가 좀 있습니다. 예를 들어 jQuery Deferred는 하위호환때문에 Promise/A+ 표준을 지키지 않습니다. Ajax도 fetch라는 표준이 나와서 굳이 jQuery방식을 쓸 필요가 없구요. jQuery를 도입하게 되면 브라우저에서 지원하니 성능적으로 월등하고, 표준이라서 앞으로도 변함이 없는 기술을 놔두고 굳이 예전 방식을 써야 하는 상황이 됩니다. ES6로 들어서면서 Javascript의 기능도 많이 늘었기에 polyfill이나 transpiler로 처리하는게 장래를 생각하면 더 나은 방식입니다.

6. 업데이트의 문제
1.x버전과 2.x버전은 공식적으로 소프트웨어로서의 수명을 다했습니다. IE6~8을 지원하려면 1.x를 써야 하는데 그렇게 되면 차후의 서포트를 받지 못하게 됩니다. IE9부터는 jQuery 3.x에서 지원하므로 당분간은 문제가 없을 예정입니다만 IE9, 10지원을 포기하면 수많은 대안이 존재합니다.

7. Virtual DOM과 상성이 안좋다.
Virtual DOM뿐만이 아니라 요즘 나오는 라이브러리들은 DOM을 직접 다루지 않고 template에서 자동으로 생성하기 때문에 jQuery와 함께 쓰기가 매우 애매합니다. 둘 중의 하나를 골라야한다면 Vue, React, Angular같은 새로운 라이브러리를 선택하는게 맞겠죠.
이 외에도 문제는 많이 찾을수 있을테지만, jQuery같이 규모가 크고 수많은 사람들이 쓰고 있는 라이브러리에 치명적인 문제는 그리 많지 않습니다. 작은 사이트를 만들고 돌리는데는 아직도 jQuery만으로 충분합니다. 그러나 점점 트렌드가 바뀌고 있으니 준비하고 다음 단계로 넘어가야 하지 않을까 하네요. 특히나 Javascript 업계는 전례가 없을 정도로 빨리 변하고 있으니까요.


https://rwd337.tistory.com/142
